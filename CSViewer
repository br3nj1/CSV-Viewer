Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create the form
$form = New-Object System.Windows.Forms.Form
$form.Text = "CSV Viewer"
$form.Size = New-Object System.Drawing.Size(1200, 900)  # 3x bigger size
$form.StartPosition = "CenterScreen"

# Create a DataGridView to display the CSV data
$dataGridView = New-Object System.Windows.Forms.DataGridView
$dataGridView.Size = New-Object System.Drawing.Size(2360, 1700)  # Adjust to fit within the larger form
$dataGridView.Location = New-Object System.Drawing.Point(10, 50)  # Adjust location to leave space for buttons
$dataGridView.AutoSizeColumnsMode = "DisplayedCells"  # Auto-fit columns to content
$form.Controls.Add($dataGridView)

# Create an OpenFileDialog to select the CSV file
$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
$openFileDialog.Filter = "CSV Files (*.csv)|*.csv"
$openFileDialog.Title = "Select a CSV File"

# Create a Button to load the CSV file
$loadButton = New-Object System.Windows.Forms.Button
$loadButton.Text = "Load CSV"
$loadButton.Size = New-Object System.Drawing.Size(100, 30)
$loadButton.Location = New-Object System.Drawing.Point(10, 10)  # Place button at the top
$form.Controls.Add($loadButton)

# Create a Button for deduplication and restoration
$dedupButton = New-Object System.Windows.Forms.Button
$dedupButton.Text = "Dedup"
$dedupButton.Size = New-Object System.Drawing.Size(100, 30)
$dedupButton.Location = New-Object System.Drawing.Point(120, 10)  # Place button next to Load CSV button
$form.Controls.Add($dedupButton)

# Variable to store the original data
$originalDataTable = $null

# Function to load and display CSV data
$loadCsv = {
    if ($openFileDialog.ShowDialog() -eq "OK") {
        $csvPath = $openFileDialog.FileName

        # Read the CSV file
        $csvData = Import-Csv -Path $csvPath

        # Convert CSV data to a DataTable
        $dataTable = New-Object System.Data.DataTable

        # Add columns
        foreach ($column in $csvData[0].PSObject.Properties.Name) {
            $dataTable.Columns.Add($column) | Out-Null
        }

        # Add rows
        foreach ($row in $csvData) {
            $dataRow = $dataTable.NewRow()
            foreach ($column in $csvData[0].PSObject.Properties.Name) {
                $dataRow[$column] = $row.$column
            }
            $dataTable.Rows.Add($dataRow) | Out-Null
        }

        # Store the original data (with all columns)
        $global:originalDataTable = $dataTable.Copy()

        # Bind the DataTable to the DataGridView
        $dataGridView.DataSource = $dataTable

        # Auto-fit all columns after loading the data
        foreach ($column in $dataGridView.Columns) {
            $column.AutoSizeMode = "DisplayedCells"
        }

        # Reset the Dedup/Restore button to Dedup
        $dedupButton.Text = "Dedup"
    }
}

# Function to de-duplicate or restore based on the button text
$dedupOrRestore = {
    if ($dedupButton.Text -eq "Dedup") {
        $dataTable = $dataGridView.DataSource

        # Check if the DataTable has "ID" and "Message" columns
        if ($dataTable.Columns.Contains("ID") -and $dataTable.Columns.Contains("Message")) {
            # Create a new DataTable for the de-duplicated data
            $dedupTable = $dataTable.DefaultView.ToTable($true, "ID", "Message")

            # Bind the de-duplicated DataTable to the DataGridView
            $dataGridView.DataSource = $dedupTable

            # Auto-fit all columns after de-duplication
            foreach ($column in $dataGridView.Columns) {
                $column.AutoSizeMode = "DisplayedCells"
            }

            # Change button text to Restore
            $dedupButton.Text = "Restore"
        } else {
            [System.Windows.Forms.MessageBox]::Show("ID and Message columns are required for de-duplication.", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        }
    } elseif ($dedupButton.Text -eq "Restore") {
        # Restore the original data (with all columns)
        $dataGridView.DataSource = $originalDataTable.Copy()

        # Auto-fit all columns after restoration
        foreach ($column in $dataGridView.Columns) {
            $column.AutoSizeMode = "DisplayedCells"
        }

        # Change button text back to Dedup
        $dedupButton.Text = "Dedup"
    }
}

# Attach the Load button click event to the loadCsv function
$loadButton.Add_Click($loadCsv)

# Attach the Dedup/Restore button click event to the dedupOrRestore function
$dedupButton.Add_Click($dedupOrRestore)

# Run the form
[void]$form.ShowDialog()
